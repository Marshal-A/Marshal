Building a full-fledged **Employee Payroll Management System** involves coding and integrating the front-end (Angular), back-end (Spring Boot), and database (MySQL). Below is a comprehensive guide to set up the system, including code examples for each component, and steps to connect them.

---

## **1. Setting up the Backend (Spring Boot + MySQL)**

### **1.1 Project Structure**
Create a new Spring Boot project with the following dependencies:
- **Spring Web** (for REST APIs)
- **Spring Data JPA** (for database operations)
- **MySQL Driver** (for MySQL connectivity)
- **Spring Boot DevTools** (for development)
- **Lombok** (for reducing boilerplate code)
  
You can generate the project from [Spring Initializr](https://start.spring.io/).

### **1.2 Configuration for MySQL Database**

In the `application.properties` or `application.yml` file, configure the MySQL database connection.

#### **application.properties**
```properties
spring.datasource.url=jdbc:mysql://localhost:3306/payroll_management
spring.datasource.username=root
spring.datasource.password=yourpassword
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
```

---

### **1.3 Creating Domain Entities**

For simplicity, we will create three main domain objects: `Employee`, `Attendance`, and `Salary`.

#### **Employee Entity**
```java
package com.example.payrollmanagement.entity;

import javax.persistence.*;
import lombok.Data;
import java.math.BigDecimal;

@Entity
@Data
public class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String email;
    private String role;  // admin or employee
    private String category;  // developer, tester, designer
    private BigDecimal salary;

    @Column(length = 60)
    private String password;
}
```

#### **Attendance Entity**
```java
package com.example.payrollmanagement.entity;

import javax.persistence.*;
import lombok.Data;
import java.time.LocalDate;

@Entity
@Data
public class Attendance {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private Long employeeId;
    private LocalDate date;
    private String status;  // Present, Absent, Leave
}
```

#### **Salary Entity**
```java
package com.example.payrollmanagement.entity;

import javax.persistence.*;
import lombok.Data;
import java.math.BigDecimal;
import java.time.LocalDate;

@Entity
@Data
public class Salary {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private Long employeeId;
    private BigDecimal basicSalary;
    private BigDecimal deductions;
    private BigDecimal netSalary;
    private LocalDate payDate;
}
```

---

### **1.4 Repository Layer**

Spring Data JPA repositories for performing CRUD operations.

#### **EmployeeRepository**
```java
package com.example.payrollmanagement.repository;

import com.example.payrollmanagement.entity.Employee;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface EmployeeRepository extends JpaRepository<Employee, Long> {
    Optional<Employee> findByEmail(String email);
}
```

#### **AttendanceRepository**
```java
package com.example.payrollmanagement.repository;

import com.example.payrollmanagement.entity.Attendance;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface AttendanceRepository extends JpaRepository<Attendance, Long> {
    List<Attendance> findByEmployeeId(Long employeeId);
}
```

#### **SalaryRepository**
```java
package com.example.payrollmanagement.repository;

import com.example.payrollmanagement.entity.Salary;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface SalaryRepository extends JpaRepository<Salary, Long> {
    List<Salary> findByEmployeeId(Long employeeId);
}
```

---

### **1.5 Service Layer**

The service layer handles business logic and communicates with the repository.

#### **EmployeeService**
```java
package com.example.payrollmanagement.service;

import com.example.payrollmanagement.entity.Employee;
import com.example.payrollmanagement.repository.EmployeeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class EmployeeService {
    @Autowired
    private EmployeeRepository employeeRepository;

    public Employee saveEmployee(Employee employee) {
        return employeeRepository.save(employee);
    }

    public List<Employee> getAllEmployees() {
        return employeeRepository.findAll();
    }

    public Optional<Employee> getEmployeeByEmail(String email) {
        return employeeRepository.findByEmail(email);
    }

    public void deleteEmployee(Long id) {
        employeeRepository.deleteById(id);
    }
}
```

---

### **1.6 Controller Layer**

REST API for front-end communication.

#### **EmployeeController**
```java
package com.example.payrollmanagement.controller;

import com.example.payrollmanagement.entity.Employee;
import com.example.payrollmanagement.service.EmployeeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/employees")
@CrossOrigin(origins = "http://localhost:4200")
public class EmployeeController {
    @Autowired
    private EmployeeService employeeService;

    @GetMapping
    public List<Employee> getAllEmployees() {
        return employeeService.getAllEmployees();
    }

    @PostMapping
    public Employee createEmployee(@RequestBody Employee employee) {
        return employeeService.saveEmployee(employee);
    }

    @DeleteMapping("/{id}")
    public void deleteEmployee(@PathVariable Long id) {
        employeeService.deleteEmployee(id);
    }
}
```

---

## **2. Setting up the Front-End (Angular)**

### **2.1 Create Angular Project**
Create a new Angular project using the Angular CLI:

```bash
ng new payroll-management
cd payroll-management
```

### **2.2 Install Dependencies**
Install necessary dependencies like **HttpClient** for communicating with the backend:

```bash
npm install @angular/common @angular/http --save
```

### **2.3 Employee Service**

Create an `employee.service.ts` to interact with the back-end API.

```typescript
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Employee } from './employee';

@Injectable({
  providedIn: 'root'
})
export class EmployeeService {
  private apiUrl = 'http://localhost:8080/api/employees';

  constructor(private http: HttpClient) {}

  getEmployees(): Observable<Employee[]> {
    return this.http.get<Employee[]>(`${this.apiUrl}`);
  }

  addEmployee(employee: Employee): Observable<Employee> {
    return this.http.post<Employee>(`${this.apiUrl}`, employee);
  }

  deleteEmployee(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }
}
```

---

### **2.4 Employee Model**
Define an employee model (`employee.ts`) to match the structure of the backend entity.

```typescript
export interface Employee {
  id: number;
  name: string;
  email: string;
  role: string;
  category: string;
  salary: number;
}
```

---

### **2.5 Employee Component**

Create an Angular component to display and manage employee data.

```typescript
import { Component, OnInit } from '@angular/core';
import { EmployeeService } from './employee.service';
import { Employee } from './employee';

@Component({
  selector: 'app-employee',
  templateUrl: './employee.component.html',
  styleUrls: ['./employee.component.css']
})
export class EmployeeComponent implements OnInit {
  employees: Employee[] = [];

  constructor(private employeeService: EmployeeService) {}

  ngOnInit(): void {
    this.loadEmployees();
  }

  loadEmployees(): void {
    this.employeeService.getEmployees().subscribe((data: Employee[]) => {
      this.employees = data;
    });
  }

  deleteEmployee(id: number): void {
    this.employeeService.deleteEmployee(id).subscribe(() => {
      this.loadEmployees();
    });
  }
}
```

---

### **2.6 Template for Employee Component**

Create a template to display the employee data.

```html
<!-- employee.component.html -->
<h2>Employee List</h2>
<table>
  <tr>
    <th>ID</th>
    <th>Name</th>
    <th>Email</th>
    <th>Role</th>
    <th>Actions</th>
  </tr>
  <tr *ngFor="let employee of employees">
    <td>{{ employee.id }}</td>
    <td>{{ employee.name }}</td>
    <td>{{ employee.email }}</td>
    <td>{{ employee.role }}</td>
    <td>
      <button (click)="deleteEmployee(employee.id)">Delete</button>
    </td>
  </tr>
</table>
```

---

## **3. Connecting Angular Front-End with Spring Boot Backend**

### **3.1 Enable CORS in Spring Boot**

To allow communication between Angular and Spring Boot, enable Cross-Origin Resource Sharing (CORS) in the Spring Boot application.

In your **EmployeeController**, add the `@CrossOrigin` annotation:

```java
@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/api/employees")
public class EmployeeController {
    // controller methods
}
```

### **3.2 Run the Applications**

1. **Backend**: Start the Spring Boot application:
   ```bash
   mvn spring-boot:run
   ```
   The backend will run on `http://localhost:8080`.

2. **Frontend
